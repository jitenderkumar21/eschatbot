/*
 * This file is generated by jOOQ.
 */
package com.example.eschatbot.database.tables;


import com.example.eschatbot.database.Chatbot;
import com.example.eschatbot.database.tables.records.CustomerstateRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Customerstate extends TableImpl<CustomerstateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>chatbot.customerstate</code>
     */
    public static final Customerstate CUSTOMERSTATE = new Customerstate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomerstateRecord> getRecordType() {
        return CustomerstateRecord.class;
    }

    /**
     * The column <code>chatbot.customerstate.customer_id</code>.
     */
    public final TableField<CustomerstateRecord, Integer> CUSTOMER_ID = createField(DSL.name("customer_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chatbot.customerstate.active_ques</code>.
     */
    public final TableField<CustomerstateRecord, Integer> ACTIVE_QUES = createField(DSL.name("active_ques"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chatbot.customerstate.active_journey</code>.
     */
    public final TableField<CustomerstateRecord, Integer> ACTIVE_JOURNEY = createField(DSL.name("active_journey"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chatbot.customerstate.phone_number</code>.
     */
    public final TableField<CustomerstateRecord, String> PHONE_NUMBER = createField(DSL.name("phone_number"), SQLDataType.CLOB, this, "");

    private Customerstate(Name alias, Table<CustomerstateRecord> aliased) {
        this(alias, aliased, null);
    }

    private Customerstate(Name alias, Table<CustomerstateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>chatbot.customerstate</code> table reference
     */
    public Customerstate(String alias) {
        this(DSL.name(alias), CUSTOMERSTATE);
    }

    /**
     * Create an aliased <code>chatbot.customerstate</code> table reference
     */
    public Customerstate(Name alias) {
        this(alias, CUSTOMERSTATE);
    }

    /**
     * Create a <code>chatbot.customerstate</code> table reference
     */
    public Customerstate() {
        this(DSL.name("customerstate"), null);
    }

    public <O extends Record> Customerstate(Table<O> child, ForeignKey<O, CustomerstateRecord> key) {
        super(child, key, CUSTOMERSTATE);
    }

    @Override
    public Schema getSchema() {
        return Chatbot.CHATBOT;
    }

    @Override
    public Customerstate as(String alias) {
        return new Customerstate(DSL.name(alias), this);
    }

    @Override
    public Customerstate as(Name alias) {
        return new Customerstate(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Customerstate rename(String name) {
        return new Customerstate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Customerstate rename(Name name) {
        return new Customerstate(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
