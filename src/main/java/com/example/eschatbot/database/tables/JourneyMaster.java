/*
 * This file is generated by jOOQ.
 */
package com.example.eschatbot.database.tables;


import com.example.eschatbot.database.Chatbot;
import com.example.eschatbot.database.tables.records.JourneyMasterRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JourneyMaster extends TableImpl<JourneyMasterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>chatbot.journey_master</code>
     */
    public static final JourneyMaster JOURNEY_MASTER = new JourneyMaster();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JourneyMasterRecord> getRecordType() {
        return JourneyMasterRecord.class;
    }

    /**
     * The column <code>chatbot.journey_master.journey_id</code>.
     */
    public final TableField<JourneyMasterRecord, Integer> JOURNEY_ID = createField(DSL.name("journey_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>chatbot.journey_master.journey_name</code>.
     */
    public final TableField<JourneyMasterRecord, String> JOURNEY_NAME = createField(DSL.name("journey_name"), SQLDataType.VARCHAR(300), this, "");

    private JourneyMaster(Name alias, Table<JourneyMasterRecord> aliased) {
        this(alias, aliased, null);
    }

    private JourneyMaster(Name alias, Table<JourneyMasterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>chatbot.journey_master</code> table reference
     */
    public JourneyMaster(String alias) {
        this(DSL.name(alias), JOURNEY_MASTER);
    }

    /**
     * Create an aliased <code>chatbot.journey_master</code> table reference
     */
    public JourneyMaster(Name alias) {
        this(alias, JOURNEY_MASTER);
    }

    /**
     * Create a <code>chatbot.journey_master</code> table reference
     */
    public JourneyMaster() {
        this(DSL.name("journey_master"), null);
    }

    public <O extends Record> JourneyMaster(Table<O> child, ForeignKey<O, JourneyMasterRecord> key) {
        super(child, key, JOURNEY_MASTER);
    }

    @Override
    public Schema getSchema() {
        return Chatbot.CHATBOT;
    }

    @Override
    public JourneyMaster as(String alias) {
        return new JourneyMaster(DSL.name(alias), this);
    }

    @Override
    public JourneyMaster as(Name alias) {
        return new JourneyMaster(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JourneyMaster rename(String name) {
        return new JourneyMaster(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JourneyMaster rename(Name name) {
        return new JourneyMaster(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
