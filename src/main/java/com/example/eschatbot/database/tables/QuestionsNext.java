/*
 * This file is generated by jOOQ.
 */
package com.example.eschatbot.database.tables;


import com.example.eschatbot.database.Chatbot;
import com.example.eschatbot.database.tables.records.QuestionsNextRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuestionsNext extends TableImpl<QuestionsNextRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>chatbot.questions_next</code>
     */
    public static final QuestionsNext QUESTIONS_NEXT = new QuestionsNext();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuestionsNextRecord> getRecordType() {
        return QuestionsNextRecord.class;
    }

    /**
     * The column <code>chatbot.questions_next.question_id</code>.
     */
    public final TableField<QuestionsNextRecord, Integer> QUESTION_ID = createField(DSL.name("question_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>chatbot.questions_next.question</code>.
     */
    public final TableField<QuestionsNextRecord, String> QUESTION = createField(DSL.name("question"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>chatbot.questions_next.journey_id</code>.
     */
    public final TableField<QuestionsNextRecord, Integer> JOURNEY_ID = createField(DSL.name("journey_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chatbot.questions_next.next_ques_id</code>.
     */
    public final TableField<QuestionsNextRecord, Integer> NEXT_QUES_ID = createField(DSL.name("next_ques_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chatbot.questions_next.flag</code>.
     */
    public final TableField<QuestionsNextRecord, Byte> FLAG = createField(DSL.name("flag"), SQLDataType.TINYINT, this, "");

    private QuestionsNext(Name alias, Table<QuestionsNextRecord> aliased) {
        this(alias, aliased, null);
    }

    private QuestionsNext(Name alias, Table<QuestionsNextRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>chatbot.questions_next</code> table reference
     */
    public QuestionsNext(String alias) {
        this(DSL.name(alias), QUESTIONS_NEXT);
    }

    /**
     * Create an aliased <code>chatbot.questions_next</code> table reference
     */
    public QuestionsNext(Name alias) {
        this(alias, QUESTIONS_NEXT);
    }

    /**
     * Create a <code>chatbot.questions_next</code> table reference
     */
    public QuestionsNext() {
        this(DSL.name("questions_next"), null);
    }

    public <O extends Record> QuestionsNext(Table<O> child, ForeignKey<O, QuestionsNextRecord> key) {
        super(child, key, QUESTIONS_NEXT);
    }

    @Override
    public Schema getSchema() {
        return Chatbot.CHATBOT;
    }

    @Override
    public QuestionsNext as(String alias) {
        return new QuestionsNext(DSL.name(alias), this);
    }

    @Override
    public QuestionsNext as(Name alias) {
        return new QuestionsNext(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionsNext rename(String name) {
        return new QuestionsNext(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionsNext rename(Name name) {
        return new QuestionsNext(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, Integer, Integer, Byte> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
